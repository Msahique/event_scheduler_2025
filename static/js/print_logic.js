
function printing_document(headerText, footerText, contentData) {
    console.log("Preparing to print document: ",contentData);
    if (!contentData || typeof contentData !== 'object') {
        alert('Invalid content data passed.');
        return;
    }

    const tbody = document.querySelector("#printPreviewTable tbody");
    tbody.innerHTML = "";

    const flattenedData = flattenData(contentData);

    flattenedData.forEach(({ field, value }) => {
        const tr = document.createElement("tr");
        const th = document.createElement("th");
        th.textContent = toTitleCase(field.replace(/_/g, " "));
        const td = document.createElement("td");
        td.textContent = value;
        tr.appendChild(th);
        tr.appendChild(td);
        tbody.appendChild(tr);
    });

    // Set header and footer
    document.getElementById("previewHeaderText").innerText = headerText || "ðŸ§¾ Report Preview";
    document.getElementById("previewFooterText").innerText = footerText || "ðŸ“… Generated by System";

    // Store for PDF use
    window._previewHeaderText = headerText;
    window._previewFooterText = footerText;
    window._previewContent = flattenedData;

    // Show the modal
    const modal = new bootstrap.Modal(document.getElementById('printPreviewModal'));
    modal.show();
}

function printing_document2(headerText, footerText, contentData) {
    console.log("Preparing to print document: ", contentData);
    if (!contentData || typeof contentData !== 'object') {
        alert('Invalid content data passed.');
        return;
    }

    const flattenedData = flattenData(contentData);

    // Build printable HTML
    let printHTML = `
        <html>
        <head>
            <title>${headerText || "Report"}</title>
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; }
                table { width: 100%; border-collapse: collapse; }
                th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
                th { background-color: #f4f4f4; }
                h2, h4 { margin: 0 0 10px; }
            </style>
        </head>
        <body>
            <h2>${headerText || "ðŸ§¾ Report"}</h2>
            <table>
                <tbody>
                    ${flattenedData.map(({ field, value }) =>
                        `<tr>
                            <th>${toTitleCase(field.replace(/_/g, " "))}</th>
                            <td>${value}</td>
                        </tr>`
                    ).join('')}
                </tbody>
            </table>
            <h4 style="margin-top:20px;">${footerText || "ðŸ“… Generated by System"}</h4>
        </body>
        </html>
    `;

    // Open new print window
    let printWindow = window.open('', '', 'width=900,height=650');
    printWindow.document.write(printHTML);
    printWindow.document.close();
    printWindow.print();
}


function flattenData(data) {
    const result = [];
    for (let key in data) {
        let value = data[key];
        if (value === null || value === undefined || value === "") continue;

        try {
            const parsed = JSON.parse(value);
            if (typeof parsed === "object" && parsed !== null) {
                for (let subKey in parsed) {
                    result.push({ field: `${key}.${subKey}`, value: parsed[subKey] });
                }
                continue;
            }
        } catch (e) {}
        result.push({ field: key, value });
    }
    return result;
}

function toTitleCase(str) {
    return str
        .split(" ")
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(" ");
}


async function downloadPDF() {
  const jsPDF = window.jspdf?.jsPDF || window.jsPDF;
  if (!jsPDF) {
    alert("PDF library (jsPDF) failed to load.");
    return;
  }

  const doc = new jsPDF("p", "mm", "a4");

  // Clone the preview content into the hidden container
  const preview = document.getElementById("printPreviewContent");
  const cloneContainer = document.getElementById("pdf-render-clone");
  cloneContainer.innerHTML = "";
  const cloned = preview.cloneNode(true);
  cloned.style.width = "800px"; // large width for better quality
  cloneContainer.appendChild(cloned);

  // Render with html2canvas
  const canvas = await html2canvas(cloneContainer, {
    scale: 2,
    useCORS: true,
    backgroundColor: "#ffffff"
  });

  const imgData = canvas.toDataURL("image/png");

  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  const imgProps = doc.getImageProperties(imgData);
  const imgRatio = imgProps.width / imgProps.height;

  let pdfWidth = pageWidth;
  let pdfHeight = pageWidth / imgRatio;

  if (pdfHeight > pageHeight) {
    pdfHeight = pageHeight;
    pdfWidth = pageHeight * imgRatio;
  }

  const x = (pageWidth - pdfWidth) / 2;
  const y = 10;

  doc.addImage(imgData, "PNG", x, y, pdfWidth, pdfHeight);
  doc.save("preview_report.pdf");
}

async function downloadPDF2(headerText, footerText, contentData) {
    const jsPDF = window.jspdf?.jsPDF || window.jsPDF;
    if (!jsPDF) {
        alert("PDF library (jsPDF) failed to load.");
        return;
    }

    if (!contentData || typeof contentData !== 'object') {
        alert("Invalid content data passed.");
        return;
    }

    // Flatten your object data
    const flattenedData = flattenData(contentData);

    // Create HTML for PDF
    let pdfHTML = `
        <div style="width:800px; font-family: Arial, sans-serif;">
            <h2>${headerText || "ðŸ§¾ Report"}</h2>
            <table style="width:100%; border-collapse: collapse;">
                <tbody>
                    ${flattenedData.map(({ field, value }) =>
                        `<tr>
                            <th style="border:1px solid #ccc; padding:8px; background:#f4f4f4;">${toTitleCase(field.replace(/_/g, " "))}</th>
                            <td style="border:1px solid #ccc; padding:8px;">${value}</td>
                        </tr>`
                    ).join("")}
                </tbody>
            </table>
            <h4 style="margin-top:20px;">${footerText || "ðŸ“… Generated by System"}</h4>
        </div>
    `;

    // Create hidden container to render
    const cloneContainer = document.createElement("div");
    cloneContainer.style.position = "fixed";
    cloneContainer.style.left = "-9999px";
    document.body.appendChild(cloneContainer);
    cloneContainer.innerHTML = pdfHTML;

    // Render with html2canvas
    const canvas = await html2canvas(cloneContainer, {
        scale: 2,
        useCORS: true,
        backgroundColor: "#ffffff"
    });

    document.body.removeChild(cloneContainer); // cleanup

    const imgData = canvas.toDataURL("image/png");

    const doc = new jsPDF("p", "mm", "a4");
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();

    const imgProps = doc.getImageProperties(imgData);
    const imgRatio = imgProps.width / imgProps.height;

    let pdfWidth = pageWidth;
    let pdfHeight = pageWidth / imgRatio;

    if (pdfHeight > pageHeight) {
        pdfHeight = pageHeight;
        pdfWidth = pageHeight * imgRatio;
    }

    const x = (pageWidth - pdfWidth) / 2;
    const y = 10;

    doc.addImage(imgData, "PNG", x, y, pdfWidth, pdfHeight);
    doc.save((headerText?.replace(/\s+/g, "_") || "report") + ".pdf");
}

async function downloadPDF3(headerText, footerText, contentData) {
    const jsPDF = window.jspdf?.jsPDF || window.jsPDF;
    if (!jsPDF) {
        alert("PDF library (jsPDF) failed to load.");
        return;
    }

    if (!contentData || typeof contentData !== 'object') {
        alert("Invalid content data passed.");
        return;
    }

    // Flatten your object data
    const flattenedData = flattenData(contentData);

    // Create HTML for PDF
    let pdfHTML = `
        <div style="width:800px; font-family: Arial, sans-serif;">
            <h2>${headerText || "ðŸ§¾ Report"}</h2>
            <table style="width:100%; border-collapse: collapse;">
                <tbody>
                    ${flattenedData.map(({ field, value }) =>
                        `<tr>
                            <th style="border:1px solid #ccc; padding:8px; background:#f4f4f4;">
                                ${toTitleCase(field.replace(/_/g, " "))}
                            </th>
                            <td style="border:1px solid #ccc; padding:8px;">${value}</td>
                        </tr>`
                    ).join("")}
                </tbody>
            </table>
            <h4 style="margin-top:20px;">${footerText || "ðŸ“… Generated by System"}</h4>
        </div>
    `;

    // Create hidden container to render
    const cloneContainer = document.createElement("div");
    cloneContainer.style.position = "fixed";
    cloneContainer.style.left = "-9999px";
    document.body.appendChild(cloneContainer);
    cloneContainer.innerHTML = pdfHTML;

    // Render with html2canvas
    const canvas = await html2canvas(cloneContainer, {
        scale: 2,
        useCORS: true,
        backgroundColor: "#ffffff"
    });

    document.body.removeChild(cloneContainer); // cleanup

    const imgData = canvas.toDataURL("image/png");

    const doc = new jsPDF("p", "mm", "a4");
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();

    const imgProps = doc.getImageProperties(imgData);
    const imgRatio = imgProps.width / imgProps.height;

    let pdfWidth = pageWidth;
    let pdfHeight = pageWidth / imgRatio;

    if (pdfHeight > pageHeight) {
        pdfHeight = pageHeight;
        pdfWidth = pageHeight * imgRatio;
    }

    const x = (pageWidth - pdfWidth) / 2;
    const y = 10;

    doc.addImage(imgData, "PNG", x, y, pdfWidth, pdfHeight);
    doc.save((headerText?.replace(/\s+/g, "_") || "report") + ".pdf");

    // Show notification
    showDownloadNotification((headerText?.replace(/\s+/g, "_") || "report") + ".pdf");
}

// Pure JS floating notification
function showDownloadNotification(fileName) {
    const notification = document.createElement("div");
    notification.textContent = `âœ… Download completed: ${fileName}`;
    notification.style.position = "fixed";
    notification.style.bottom = "20px";
    notification.style.right = "20px";
    notification.style.background = "#28a745";
    notification.style.color = "#fff";
    notification.style.padding = "10px 20px";
    notification.style.borderRadius = "5px";
    notification.style.boxShadow = "0 2px 6px rgba(0,0,0,0.2)";
    notification.style.fontFamily = "Arial, sans-serif";
    notification.style.zIndex = 9999;
    notification.style.opacity = "0";
    notification.style.transition = "opacity 0.5s ease";

    document.body.appendChild(notification);

    // Fade in
    setTimeout(() => {
        notification.style.opacity = "1";
    }, 50);

    // Fade out and remove
    setTimeout(() => {
        notification.style.opacity = "0";
        setTimeout(() => notification.remove(), 500);
    }, 3000);
}


